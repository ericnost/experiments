<html lang="en">
  <head>
    <title>Canada's Census of Agriculture</title>
    <meta charset="utf-8">
    <script src="/d3-scale/dist/d3-scale.js"></script>
    <script src="/d3-format/dist/d3-format.js"></script>
    <script src="/d3-array/dist/d3-array.js"></script>
    <script src="/d3-color/dist/d3-color.js"></script>
    <script src="/jquery/dist/jquery.js"></script>
    <script src="/leaflet/dist/leaflet.js"></script>
    <link rel="stylesheet" href="/leaflet/dist/leaflet.css" />
    <script src="/nprogress/nprogress.js"></script>
    <link rel="stylesheet" href="/nprogress/nprogress.css"/>
    <script src="/leaflet-draw/dist/leaflet.draw.js"></script>
    <link rel="stylesheet" href="/leaflet-draw/dist/leaflet.draw.css"/>
    <style>
    .loaderImage{
      display: none;
      position: absolute;
      margin: auto;
      height: 50px;
      width: 50px;
      top: 25%;
      left: 50%;
      z-index: 99999;
    }
    .legend {
		width: 150px;
	    line-height: 18px;
	    color: #555;
	}
	.legend i {
	    width: 18px;
	    height: 18px;
	    float: left;
	    opacity: 0.8;
	}
	.info {
	    padding: 6px 8px;
	    font: 14px/16px Arial, Helvetica, sans-serif;
	    background: rgba(255,255,255,0.8);
	    box-shadow: 0 0 10px rgba(0,0,0,0.2);
	    border-radius: 3px;
	}
	.info h4 {
	    margin: 0 0 2px;
	    color: #777;
	}
  </style>
  </head>

  <body>
  <!--MODAL WITH START MAPPING BUTTON (POSTS DATA) <img src="./public/images/ajax-loader.gif"/>-->
  <div class="loaderImage"> </div>
  <div id="map" style="width: 100%; height: 50%"></div>
  <button onclick="post()">Submit</button>
    <script>
    NProgress.configure({ parent: '.loaderImage' });
    //don't reload map/tiles if page has already been loaded once
    var map =  L.map('map',{ center: [<%= clat %>,<%= clng %>], zoom: <%= zoom %>, maxBoundsViscosity: .4}); 
    map.setMaxBounds(map.getBounds())
    var boundsDelta = map.getBounds()
    var zoomDelta = <%= zoom %>
    var format = d3.format(".4n")
    //map.invalidateSize(options.debounceMoveend = true) 
    L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}{r}.png', {
            attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'}).addTo(map);
    var layer = L.geoJSON( <%- JSON.stringify(data) %>, {
        style: function (feature) {
            return {color: "blue"};
        }})
    layer.addTo(map);

	var stats
	var legend = L.control({position: 'bottomleft'});
	var scheme = {"GPS technology": ['#edf8fb','#b2e2e2','#66c2a4','#2ca25f','#006d2c'], "GIS mapping (e.g., soil mapping)": ['#f1eef6','#bdc9e1','#74a9cf','#2b8cbe','#045a8d'], "Robotic milking": ['#ffffb2','#fecc5c','#fd8d3c','#f03b20','#bd0026']}
    	
    var colorize = function(data){
    	var values = []
        data.features.forEach(function(d){
            var number = parseFloat(d.properties.f2)
            number = parseFloat(format(number))
            values.push(number)
        })
        median=format(d3.median(values))
        max = format(d3.max(values))
        min = format(d3.min(values))
        stats = {"max": max, "median": median, "min": min}
    	color = d3.scaleQuantile().domain(values).range(scheme[<%- variable %>])
    	data.features.forEach(function(d){
    		d.properties.thisColor = color(d.properties.f2)
    	}) 
    }

    var legendize = function(){
    	map.removeControl(legend)
    	legend = L.control({position: 'bottomleft'});
    	legend.onAdd = function (map) {
            var div = L.DomUtil.create('div', 'info legend')
            var grades = [stats.min, parseFloat(format(color.quantiles()[0])), parseFloat(format(color.quantiles()[1])), parseFloat(format(color.quantiles()[2])), parseFloat(format(color.quantiles()[3])), stats.max]
            var labels = [];
                // loop through our density intervals and generate a label with a colored square for each interval
                for (var i = 0; i < color.range().length; i++) {
                    div.innerHTML +=
                        '<i style="background:' + color.range()[i] + '"></i> ' +
                        grades[i] + (grades[i+1] ? '&ndash;' + grades[i + 1] + '%<p>' : '+');
                }
                return div;
        	};
    	map.addControl(legend)
    }

    map.on('dragend', function(e){
    	map.setMaxBounds(map.getBounds())
    	var bounds = map.getBounds();
      	var zoom = map.getZoom();
      	if (zoom < 8){
      		var scalar = 15/zoom
      	} else if (zoom >= 8 & zoom < 10) {
      		var scalar = 4/zoom
      	} else if (zoom >= 10){
      		var scalar = 2/zoom
      	}
    	var conditions = Math.abs(bounds._northEast.lng - boundsDelta._northEast.lng) > scalar || Math.abs(bounds._northEast.lat - boundsDelta._northEast.lat) > scalar
      	zoomDelta = zoom
      	boundsDelta = bounds
      	moreDataNeeded = conditions & zoom > 5
      	if (moreDataNeeded) {
	        $('.loaderImage').show();
	        NProgress.start()
	        $.post('/data', {minLat: bounds._southWest.lat, minLon:bounds._southWest.lng, maxLat:bounds._northEast.lat, maxLon:bounds._northEast.lng, zoom: zoom}, function(resp) {
	            map.removeLayer(layer);
	            colorize(resp)
	            layer = L.geoJSON( resp, {
	              style: function (feature) {
	                  return {weight: 1, opacity: .75, color: "black", fillColor: feature.properties.thisColor, fillOpacity: .75};
	              }}).bindPopup(function (layer) {
	              	  var percent = parseFloat(layer.feature.properties.f2).toFixed(2);
	                  return layer.feature.properties.f1 + " " + percent + "%";
	              })
	            layer.addTo(map);
	            legendize()
	        }).done(function(){NProgress.done();$('.loaderImage').hide();})
      	}
    })
    map.on('zoomend', function(e) {
      map.setMaxBounds(map.getBounds()) 	
      var bounds = map.getBounds();
      var zoom = map.getZoom();

      var condition1 = zoomDelta > 7 & zoom <= 7 ? true : false //over 10 and went below?
      var condition2 = zoomDelta <= 7 & zoom > 7 ? true: false // under 10 and went above?
      var condition3 = zoomDelta <= 5 & zoom > 5 ? true: false
      var condition4 = zoomDelta > 5 & zoom <= 5 ? true: false

      var conditions = [condition1, condition2, condition3, condition4]

      zoomDelta = zoom
      boundsDelta = bounds
      
      moreDataNeeded = conditions.includes(true)
      
      if (moreDataNeeded) {
	        $('.loaderImage').show();
	        NProgress.start()
	        $.post('/data', {minLat: bounds._southWest.lat, minLon:bounds._southWest.lng, maxLat:bounds._northEast.lat, maxLon:bounds._northEast.lng, zoom: zoom}, function(resp) {
	            map.removeLayer(layer);
	            colorize(resp)
	            layer = L.geoJSON( resp, {
	              style: function (feature) {
	                  return {weight: 1, opacity: .75, color: "black", fillColor: feature.properties.thisColor, fillOpacity: .75};
	              }}).bindPopup(function (layer) {
	              	  var percent = parseFloat(layer.feature.properties.f2).toFixed(2);
	                  return layer.feature.properties.f1 + " " + percent + "%";
	              })
	            layer.addTo(map);
	            legendize()
	        }).done(function(){NProgress.done();$('.loaderImage').hide();})
      	}
    });


    // https://jsfiddle.net/user2314737/324h2d9q/
    // Initialise the FeatureGroup to store editable layers
	var editableLayers = new L.FeatureGroup();
	map.addLayer(editableLayers);

	var drawPluginOptions = {
	  position: 'topright',
	  draw: {
	    polygon: {
	      allowIntersection: false, // Restricts shapes to simple polygons
	      drawError: {
	        color: '#e1e100', // Color the shape will turn when intersects
	        message: '<strong>Oh snap!<strong> you can\'t draw that!' // Message that will show when intersect
	      },
	      shapeOptions: {
	        color: '#97009c'
	      }
	    },
	    // disable toolbar item by setting it to false
	    polyline: false,
	    circle: false, // Turns off this drawing tool
	    rectangle: false,
	    marker: false,
	    },
	  edit: {
	    featureGroup: editableLayers, //REQUIRED!!
	    edit: false,
	    remove: true
	  }
	};

	// Initialise the draw control and pass it the FeatureGroup of editable layers
	var drawControl = new L.Control.Draw(drawPluginOptions);
	map.addControl(drawControl);

	map.on('draw:created', function(e) {
	  var type = e.layerType,
	    layer = e.layer;
	  editableLayers.addLayer(layer);
	});
	function post(){
		//test!!!
		var shapes = editableLayers.toGeoJSON()
		$.post('/send', {shape: shapes}, function(resp) {
            console.log("sent")
      	})
	}

		  
  </script>
</body>
</html>